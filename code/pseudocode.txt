structure Point:
    real x, y  -- cartesian coordinates
    real r, fi  -- polar coordinates
    -- r = sqrt(x * x + y * y)
    -- fi = atan2(y, x)
    -- supports +, -, *, / operations, i.e. p1 @ p2 = Point(p1.x @ p2.x, p1.y @ p2.y), ∀@ ∈ {+, -, *, /}

structure Circle:
    real R  -- radius, ∀v > 0
    Point center

structure Sector:
    Circle circle
    real arc  -- ∀v ∈ (0, 2π)
    real start_arm  -- ∀v ∈ (-π, π]

structure List  -- can be created via []
structure Map
structure Set  -- can be created via {}

structure ReducedGroup:
    real start  -- ∀v ∈ (-π, π]
    Set<real> points  -- ∀p ∈ points -> p ∈ (-π, π]

structure Group:
    Sector sector
    List<Point> points

function reduce(Sector sector, List<Point> points) -> Map<real, List<Point>>:
    -- preconditions:
    -- ∀p ∈ points -> p ∈ sector.circle

    center = sector.circle.center
    fi2points = Map()
    -- assertions A1:
    -- ...
    for p in points:
        fi = (p - center).fi
        if fi in fi2points.keys:
            fi2points[fi].append(p)
        else:
            fi2points[fi] = [p]  -- new list with p inside

        -- assertions A1

    -- postconditions:
    -- ...
    return fi2points


function find_all_Groups(real arc, Set<real> values) -> Set<ReducedGroup>:
    -- preconditions:
    -- arc ∈ (0, 2π)
    -- #points >= 2
    -- ∀p ∈ points -> p ∈ (-π, π]

    points = [p for p in values] + [p - 2π for p in values]
    points.descending_sort()

    start = points[0]
    first = 0
    afterlast = 1

    -- Find index of first point not inside
    -- assertions A1:
    -- ...
    while afterlast < #points / 2 and points[afterlast] >= start - arc:
        afterlast += 1
        -- assertions A1

    -- Form first group
    first_group = ReducedGroup(start, {p if p > -π else p + 2π for p in points[first:afterlast]})
    groups = {first_group}

    -- assertions A2:
    -- ...
    while True:
        p1 = points[first]
        pn1 = points[afterlast]
        alpha = start - p1  -- angle between 1st point and start arm
        omega = (start - arc) - pn1  -- angle between 1st point outside sector and end arm

        -- Try to rotate sector by such angle that
        -- only first point inside (p1) will be excluded
        -- and first point not inside (pn1) will not be included
        if alpha >= omega:
            -- Not possible to exclude p1 and not include pn1
            -- Rotating end arm to pn1 forms a new group with the same first point
            start = pn1 + arc
            afterlast += 1
        else:  -- alpha < omega
            -- It is possible to exclude p1 and not include pn1
            -- Rotate start arm to p1, this action will not change group
            start = p1

            if first == afterlast - 1:
                -- p1 is the only point inside
                -- Rotate end arm to pn1, it will form a new group
                start = pn1 + arc
                first = afterlast
                afterlast += 1
            else:
                gamma = p1 - points[first + 1]  -- angle to second point inside
                omega = (start - arc) - pn1  -- angle to pn1 after rotation
                rho = min(gamma, omega) / 2
                start = start - rho
                first += 1

        g = ReducedGroup(start, {p if p > -π else p + 2π for p in points[first:afterlast]})
        -- If new group is identical to the first one, stop iteration
        if g == first_group:
            break

        groups.add(g)

        -- assertions A2

    -- postconditions:
    -- groups contains all possible groups
    -- ∀g ∈ groups, ∀p in g.points -> p ∈ values

    return groups


function unreduce(Sector sector, Map<real, List<Point>> fi2points, Set<ReducedGroup> groups) -> Set<Group>:
    -- preconditions:
    -- ∀g ∈ groups, ∀p in g.points -> p ∈ fi2points.keys

    result = {}

    -- assertions A1:
    -- ...
    for g in groups:
        points = []

        -- assertions A2:
        -- ...
        for fi in g.points:
            points = points + fi2points[fi]
            -- assertions A2

        fg = Group(Sector(sector.circle, sector.arc, g.start), points)
        result.add(fg)

        -- assertions A1

    -- postconditions:
    -- ...
    return result
